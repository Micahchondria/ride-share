openapi: 3.0.0
info:
  title: Ride Share API
  description: '`API` for **COS 243** Semester Project'
  version: 0.1.0
tags:
  - name: user
    description: Ride Share users
  - name: vehicle-type
    description: Vehicle types
components:
  schemas:
    Error:
      description: Generic error message
      type: object
      properties:
        message:
          type: string
      example:
        message: Something strange happened.
    Driver:
      description: Driver of car
      type: object
      properties:
        id: 
          type: integer
        userId:
          type: integer
        licenseNumber:
          type: string
        licenseState:
          type: string
      example:
        id: 43
        userId: 36
        licenseNumber: 2003311
        licenseState: IN
    Location:
      description: The start or end of a ride
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        address:
          type: string
        city:
          type: string
        state:
          type: string
        zipCode:
          type: string
        # ridesFrom:
        #   type: object
        #   properties:
        #     $ref: "#/components/schemas/Ride"
        #   required: false
        # ridesTo:
        #   type: object
        #   properties:
        #     $ref: "#/components/schemas/Ride"
        #   required: false
      example:
        id: 5
        name: Home
        address: 123 Sharpp Rd.
        city: Pencilsville
        state: PA
        zipCode: '34676'
    Ride:
      description: An instance of a ride
      type: object
      properties:
        id:
          type: integer
        date:
          type: string
        time:
          type: string
        distance:
          type: number
        fuelPrice:
          type: number
        fee:
          type: number
        vehicleId:
          type: integer
        fromLocation:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            address:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string
        toLocationId:
          type: object
          properties:
            id:
              type: integer
            name:
              type: string
            address:
              type: string
            city:
              type: string
            state:
              type: string
            zipCode:
              type: string
    User:
      description: Each user of **Ride Share**
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        isAdmin:
          type: boolean
      example:
        id: 42
        firstName: Fred
        lastName: Ziffle
        email: fred@example.com
        password: super-secret-thing
        phone: 765-555-1212
        isAdmin: false
    Vehicle:
      description: Each vehicle used for rides
      type: object
      properties:
        id:
          type: integer
        make:
          type: string
        model:
          type: string
        color:
          type: string
        vehicleTypeId:
          type: integer
        capacity:
          type: integer
        mpg:
          type: number
        licenseState:
          type: integer
        licensePlate:
          type: string
    VehicleType:
      description: Type of a vehicle
      type: object
      properties:
        id:
          type: integer
        vehicleType:
          type: string
      example:
        id: 42
        type: Pickup Truck
paths:
  /users:
    summary: Operations on users
    get:
      summary: Get all users
      tags:
        - user
      responses:
        '200':
          description: All users fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
    post:
      summary: Create a new user
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Created sucessfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                example:
                  userId: 42
        '400':
          description: Not created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Duplicate email address
  /users/{id}:
    summary: Operations on a single user
    get:
      summary: Get user by ID
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: ID of user to fetch
          schema:
            type: integer
        - name: vehicles
          in: query
          description: Fetches authorized vehicles for user
          schema:
            type: boolean
        - name: drives
          in: query
          description: Fetches rides that this user is driving
          schema:
            type: boolean
        - name: rides
          in: query
          description: Fetches rides on which this user is a passenger
          schema:
            type: boolean
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User not found
    patch:
      summary: Update user by ID
      tags:
        - user
      parameters:
        - name: id
          in: path
          required: true
          description: ID of user to update
          schema:
            type: integer
      requestBody:
        description: Updated user
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                password:
                  type: string
                phone:
                  type: string
                isAdmin:
                  type: boolean
      responses:
        '200':
          description: Successfully updated
          content:
            application/json:
              schema:
                $ref: '#components/schemas/User'
  /users/{uid}/rides/{rid}:
    summary: Adds and removes passengers from rides
    delete:
      summary: Remove passenger from ride
      tags:
        - user
        - ride
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
        - name: rid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Passenger deleted successfully.
        '400':
          description: Passenger not deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: User ID does not exist
    post:
      summary: Add passenger to ride
      tags:
        - user
        - ride
      parameters:
        - name: uid
          in: path
          required: true
          schema:
            type: integer
        - name: rid
          in: path
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  rideId:
                    type: integer
                example:
                  userId: 42
                  rideId: 2
        '400':
          description: Not created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: IDs do not exist
  /vehicles:
    summary: Operations on vehicles
    get:
      summary: Get all vehicles
      tags:
        - vehicle
      responses:
        '200':
          description: All vehicles fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#components/schemas/Vehicle'
    post:
      summary: Create a new vehicle
      tags:
        - vehicle
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/Vehicle'
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  vehicleId:
                    type: integer
                example:
                  vehicleId: 16
        '400':
          description: Not created
          content:
            application/json:
              schema:
                $ref: '#components/schemas/Error'
              example:
                message: Duplicate license plate  
  /vehicles/{id}:
    summary: Operations on a specific vehicle
    patch:
      summary: Update vehicle by ID
      tags:
        - vehicle
      parameters:
        - name: id
          in: path
          required: true
          description: ID of vehicle to update
          schema:
            type: integer
      requestBody:
        description: Updated vehicle
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Vehicle'
      responses:
        '200':
          description: Successfully updated vehicle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
    get:
      summary: Retrieve all vehicles
      tags:
        - vehicle
      parameters:
        - name: id
          in: path
          required: true
          description: ID of vehicle to fetch
          schema:
            type: integer
        - name: drivers
          in: query
          description: Fetches authorized drivers for vehicle
          schema:
            type: boolean
        - name: rides
          in: query
          description: Fetches rides assigned to this vehicle
          schema:
            type: boolean
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Vehicle'
  /vehicle-types:
    post:
      summary: Create a new vehicle type.
      description: >-
        _Each_ vehicle in **Ride Share** has a `type`, making it easier for
        riders to identify the vehicle.
      tags:
        - vehicle-type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicleType:
                  type: string
              example:
                vehicleType: Pickup Truck
      responses:
        '200':
          description: New vehicle type created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleType'
    get:
      summary: Retrieve all vehicle types
      tags:
        - vehicle-type
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/VehicleType'
  /vehicle-types/{id}:
    patch:
      summary: Update an existing vehicle type
      tags:
        - vehicle-type
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        description: Updated vehicle type
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                vehicleType:
                  type: string
              example:
                vehicleType: SUV
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VehicleType'
        '400':
          description: No such vehicle ID
    delete:
      summary: Delete an existing vehicle type
      tags:
        - vehicle-type
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        '200':
          description: Vehicle deleted
        '400':
          description: Can't delete vehicle
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Vehicle ID does not exist
  /drivers:
    summary: Operations on drivers
    post:
      summary: Create a new driver
      tags:
      - driver
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                userId:
                  type: integer
                licenseNumber:
                  type: string
                licenseState:
                  type: string
              example:
                id: 22
                userId: 11
                licenseNumber: 1098321
                licenseState: IN
      responses:
        '201':
          description: Created sucessfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: integer
                  licenseNumber:
                    type: string
                  licenseState:
                    type: string
                example:
                  userId: 33
                  licenseNumber: 911141
                  licenseState: IN
        '404':
          description: Not created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
              example:
                message: Requested resource not found
  /drivers/{id}:
    summary: Operations on a single driver
    delete:
      summary: Delete an existing driver
      tags:
      - driver
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        required: true
      responses:
        '200':
          description: Driver deleted
        '404':
          description: Can't delete driver
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
              example:
                message: No such driver ID
  /rides:
    summary: Operations on rides
    get:
      summary: Get all rides
      tags:
        - ride
      parameters:
        - name: drivers
          in: query
          description: Fetch drivers for this ride
          schema:
            type: boolean
        - name: passengers
          in: query
          description: Fetch passengers on this ride
          schema:
            type: boolean
      responses:
        '200':
          description: All rides fetched successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ride'
    post:
      summary: Create a new ride
      tags:
        - ride
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ride'
      responses:
        '201':
          description: Created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  rideId:
                    type: integer
                example:
                  rideId: 2
        '400':
          description: Not created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
              example:
                message: Invalid date
  /rides{id}:
    summary: Operations on a single ride
    get:
      summary: Get ride by ID
      tags:
        - ride
      parameters:
        - name: id
          in: path
          required: true
          description: ID of ride to fetch
          schema:
            type: integer
        - name: drivers
          in: query
          description: Fetch drivers for this ride
          schema:
            type: boolean
        - name: passengers
          in: query
          description: Fetch passengers on this ride
          schema:
            type: boolean
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ride'
        '400':
          description: No ride found with this ID
    patch:
      summary: Update an existing ride
      tags:
        - ride
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      requestBody:
        description: Updated ride
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                time:
                  type: string
                distance:
                  type: number
                fuelPrice:
                  type: number
                fee:
                  type: number
                vehicleId:
                  type: integer
                fromLocationId:
                  type: integer
                toLocationId:
                  type: integer
              example:
                date: "2011-10-16"
                time: "20:00:00"
                distance: 43.0
                fuelPrice: 3.0
                fee: 47.3
                vehicleId: 42
                fromLocationId: 1
                toLocationId: 2
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ride'
        '400':
          description: No such ride ID
  /locations:
    summary: Operations on locations
    post:
      summary: Create a new location.
      description: _Each_ location in **Ride Share** has a `name`, making it easier
        for riders to identify the location.
      tags:
      - location
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                city:
                  type: string
                state:
                  type: string
                zipCode:
                  type: string
                fuelPrice:
                  type: number
              example:
                name: House
                address: 123 Example St.
                city: Fort Wayne
                state: IN
                zipCode: '16989'
                fuelPrice: 2.9112
      responses:
        '201':
          description: New location created
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Location"
        '404':
          description: New location creation attempt failed
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
              example:
                message: Requested resource not found
    get:
      summary: Retrieve all locations
      tags:
      - location
      parameters:
      - name: name
        in: query
        required: false
        description: name of location to fetch
        schema:
          type: string
      - name: address
        in: query
        required: false
        description: address of location to fetch
        schema:
          type: string
      - name: city
        in: query
        required: false
        description: city of location to fetch
        schema:
          type: string
      - name: state
        in: query
        required: false
        description: state of location to fetch
        schema:
          type: string
      - name: zipCode
        in: query
        required: false
        description: zipCode of location to fetch
        schema:
          type: string
      - name: ridesFrom
        in: query
        required: false
        description: return the information on rides from this location too
        schema:
          type: boolean
      - name: ridesTo
        in: query
        required: false
        description: return the information on rides to this location too
        schema:
          type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Location"
        '404':
          description: Failed retrieval
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
              example:
                message: Requested resource not found
  /locations/{id}:
    summary: Operations on a single location
    get:
      summary: Get location by ID
      tags:
      - location
      parameters:
      - name: name
        in: query
        required: false
        description: name of location to fetch
        schema:
          type: string
      - name: address
        in: query
        required: false
        description: address of location to fetch
        schema:
          type: string
      - name: city
        in: query
        required: false
        description: city of location to fetch
        schema:
          type: string
      - name: state
        in: query
        required: false
        description: state of location to fetch
        schema:
          type: string
      - name: zipCode
        in: query
        required: false
        description: zipCode of location to fetch
        schema:
          type: string
      - name: ridesFrom
        in: query
        required: false
        description: return the information on rides from this location too
        schema:
          type: boolean
      - name: ridesTo
        in: query
        required: false
        description: return the information on rides to this location too
        schema:
          type: boolean
      responses:
        '200':
          description: Successfully retrieved
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Location"
        '404':
          description: Location not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
              example:
                message: Location not found
    patch:
      summary: Update an existing location
      tags:
      - location
      parameters:
      - name: id
        in: path
        schema:
          type: integer
        required: true
      - name: name
        in: query
        required: false
        description: name of location to fetch
        schema:
          type: string
      - name: address
        in: query
        required: false
        description: address of location to fetch
        schema:
          type: string
      - name: city
        in: query
        required: false
        description: city of location to fetch
        schema:
          type: string
      - name: state
        in: query
        required: false
        description: state of location to fetch
        schema:
          type: string
      - name: zipCode
        in: query
        required: false
        description: zipCode of location to fetch
        schema:
          type: string
      requestBody:
        description: Updated location
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                address:
                  type: string
                city:
                  type: string
                state:
                  type: string
                zipCode:
                  type: string
                fuelPrice:
                  type: number
              example:
                name: House
                address: 123 Street St.
                city: Cartoonville
                state: IN
                zipCode: '321321'
                fuelPrice: 1.001
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Location"
        '404':
          description: Location not found
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Error"
              example:
                message: Location not found
